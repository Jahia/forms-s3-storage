<%@ taglib prefix="jcr" uri="http://www.jahia.org/tags/jcr" %>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@ taglib prefix="utility" uri="http://www.jahia.org/tags/utilityLib" %>
<%@ taglib prefix="template" uri="http://www.jahia.org/tags/templateLib" %>
<%@ taglib prefix="functions" uri="http://www.jahia.org/tags/functions" %>
<%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>
<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %>
<%@ taglib prefix="query" uri="http://www.jahia.org/tags/queryLib" %>

<%--@elvariable id="currentNode" type="org.jahia.services.content.JCRNodeWrapper"--%>
<%--@elvariable id="currentResource" type="org.jahia.services.render.Resource"--%>
<%--@elvariable id="flowRequestContext" type="org.springframework.webflow.execution.RequestContext"--%>
<%--@elvariable id="out" type="java.io.PrintWriter"--%>
<%--@elvariable id="renderContext" type="org.jahia.services.render.RenderContext"--%>
<%--@elvariable id="script" type="org.jahia.services.render.scripting.Script"--%>
<%--@elvariable id="scriptInfo" type="java.lang.String"--%>
<%--@elvariable id="url" type="org.jahia.services.render.URLGenerator"--%>
<%--@elvariable id="workspace" type="java.lang.String"--%>
<%--<div class="row-fluid">--%>
    <div class="col-sm-6" id="formTotalAverages">
        <div class="row">
        <div class="col-sm-4">
            <div id="totalBlock" class="well hand" style="min-height: 100px;">
                <div class="text-center"><strong id="totalValue" style=" color:#39f"></strong></div>
                <div class="text-center"><fmt:message key="fcnt_result.submissions.total"/></div>
            </div>
        </div>
        <div class="col-sm-4">
            <div class="averageBlock well hand" style="min-height: 100px;">
                <div class="text-center"><strong id="averageValue" style=" color:#39f"></strong></div>
                <div class="text-center" id="labelAverage" data-label-average="week"></div>
            </div>
        </div>
        <div class="col-sm-4" id="last7">
            <div class="lastDaysBlock well hand" style="min-height: 100px;">
                <div class="text-center" style="text-align: center;color:#39f"><strong id="lastDaysValue"></strong></div>
                <div class="text-center" id="numberOfDays"></div>
            </div>
        </div>
        </div>
    </div>
<script>
    var TotalAverageView = Backbone.View.extend({
        el: $("#formTotalAverages"),
        jsVarMap: jsVarMap,
        nbDays: [1, 3, 7, 14, 21],
        groupBy: ["week", "month", "year", "day"],
        patterns:[{key:"day",pattern:"YYYYDDD"},{key:"week",pattern:"YYYYWW"},{key:"month",pattern:"YYYYMM"},{key:"year",pattern:"YYYY"}],
        currentNbDays: 0,
        currentGroupBy: 0,
        events: {
            'click .lastDaysBlock': 'incrementCurrentNbDays',
            'click .averageBlock': 'incrementCurrentGroupBy'
        },
        initialize: function () {
            var that = this;
            //Listen to the collection sync to update the dataTable render
            var url = getFetchURL({formId:"${currentNode.parent.identifier}",apiMethodName:"total"});
            $.ajax({
                url: url,
                dataType: 'json',
                async: false,
                success: function(results) {
                    $("#totalValue").html(results.data);
                    that.renderBlocks();
                    that.totalValue = results.data;
                }
            });
        },
        renderBlocks: function () {
            // Average Block
            this.renderAverageBlock();

            //Last 7 days Block
            this.renderLastDaysBlock();

        },
        incrementCurrentNbDays: function () {
            this.currentNbDays++;
            this.renderLastDaysBlock();
        }, incrementCurrentGroupBy: function () {
            this.currentGroupBy++;
            this.renderAverageBlock();
        },
        renderLastDaysBlock: function () {
            $.get(getFetchURL({formId:"${currentNode.parent.identifier}",apiMethodName:"lastDays"}), {nbDays: this.nbDays[this.currentNbDays % this.nbDays.length]}, function (results) {
                // Formating last 7 days values  depending on average
                $("#lastDaysValue").html(results.data.total);
                $("#numberOfDays").html(results.data.label);
            });
        },
        renderAverageBlock: function () {
            var that = this;
            $.get(getFetchURL({formId:"${currentNode.parent.identifier}",apiMethodName:"groupTotal"}), {groupBy: this.groupBy[this.currentGroupBy % this.groupBy.length]}, function (results) {
                // Formating last 7 days values  depending on average
                $("#averageValue").html(that.getAverage(results.data.total,that));
                $("#labelAverage").html(results.data.label);
            });
        },
        getAverage: function (results, model) {
            var minDate;
            var maxDate;
            var sum=0;
            var groupBy = model.groupBy[model.currentGroupBy % model.groupBy.length];

            //Get pattern from groupBy
            var patternObject = _.find(model.patterns, function(pattern){
               return pattern.key==groupBy;
            });
            var keys = 0;
            //Summing values and getting date min and date max in results
            _.each(results, function(value,key){
                if(minDate === undefined || moment(key,patternObject.pattern).isBefore(moment(minDate, patternObject.pattern))){
                    minDate=moment(key,patternObject.pattern);
                }
                if(maxDate === undefined || moment(key,patternObject.pattern).isAfter(moment(maxDate, patternObject.pattern))){
                    maxDate=moment(key,patternObject.pattern);
                }
                sum+=value;
                keys++;
            });

            //Calculate the submissions average
            if(minDate !== undefined){
                //Getting number of groups between date min and date max using moment-range.js
                var range = moment().range(minDate, maxDate);
                var nbgroups = range.diff(groupBy+"s", true);
                if(nbgroups === 0) {
                    nbgroups = 1;
                }
                if(keys > nbgroups) {
                    //fix issue when interval of dates are too close to each other
                    nbgroups = keys;
                }
                //Dividing the sum by the number of groups rounding to 2 digits
                return (sum / nbgroups).toFixed(2);
            }
            else {
                return 0;
            }

        }
    })
</script>